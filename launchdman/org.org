* Abustruct classes
** Single
*** Properties
**** tag<str>
**** value<list>
*** init(tag, *value)
    set self.tag to tag, turn value into a list and set to self.value
*** parse()
    just a wrapper for printMe() 
    returns parsed text for luanchd
*** printMe(selfTag, selfValue)
    parse with selfTag and selfValue recusively
    self.tag self.value is normally what to pass in
*** findAll(selfValue)
    returns all not-singles inside selfValue
*** findAllSingles(selfValue)
    returns all singles inside selfValue
*** _add(value, selfValue)
    value: list
    selValue: list
    add value to selfvalue
    just an append
*** add(*value)
    calls add and add value to self.value
*** _remove(removeList, selfValue)
    removeList: list of Single or Pair
    remove all matching elements from selfValue
    by matching with every elements in removeList
*** remove(*removeList)
    removeList: list of Single or Pair
    to be overwrited by subclass
    calls _remove and remove every matching element in self.value
*** clear()
    set self.value to empty
** BoolSingle | Single
    A type of Single that only have a single tag.
    The only difference is it prints differently.
    Usually indicate true of false.
*** init(value)
    takes a str value
*** printMe(selfTag, selfValue)
    you can call it the same way as Single.printMe,
    selfTag will just be ignored
** TypedSingle | Single
*** init(*value)
    self.tag will be set to subclass name strip of "Single"
    e.g.: StringSingle >> string
    self.value set to *value
** StringSingle | TypedSingle
** ArraySingle | TypedSingle
** DictSingle | TypedSingle

** Pair | Single
*** init(key='', *value)
    if key empty, self.key set to subclass name.
    self.key set to key,
    self.value set to value
*** printMe(selfKey, selfValue)
*** parse()
    again a wrapper of printMe()
** BoolPair | Pair
pair that contains a single BoolSingle
*** init()
    set tag to subclass name, value to empty
    then call setToTrue(), which set value to list contain
    a true BoolSingle
*** setToTrue()
    set self.value to [BoolSingle('true')]
*** setToFalse()
    set value to false
** SingleValuePair | Pair | not used
   add and remove method raises error
*** init()
    self.key to subclass name, self.value to empty
    probably to be overwrited
*** changeTo(value)
    change value to something, must be overwrited
** CoverPair | Pair | not used
   add and remove method act on its value[0]
** SingleStringPair | SingleValuePair
*** init(string)
    string<str>
    set self.value to StringSingle(string)
*** changTo(newString)
    newString<str>

** SingleDictPair | Pair
   subclass must have a keyWord property
*** init(dic)
dic: dict
super init set key,
self.dicValue is self.value[0].value
parse dict into self.value

*** add(dic)
parse dict into self.value

*** remove(dic)
remove matching in self.value
   
** ArrayOfStringPair | Pair
*** init(list)
    list: a list of strings
*** add(list)
    list: a list of strings
*** remove(list)
    list: a list of strings
* launchd classes

** Label | SingleStringPair

*** init(label)
    key is set to subclass name because there is no key argument
    changeTo method is called with label
*** changeTo(value)
    value is string
    change self.value to [StirngSingle]

** Program | SingleStringPair
*** init(label)
    key is set to Program because there is no key argument
    changeTo method is called with label
    
*** changeTo(value)
    value is string
    change self.value to [StirngSingle]

** ProgramArguments | ArrayOfStringPair
*** init(list)
    list: a list of strings
*** add(list)
    list: a list of strings
*** remove(list)
    list: a list of strings
** EnvironmentVariables | SingleStringPair
*** init(path)
    takes a path<str> as path
** StandardInPath | SingleStringPair
** StandardOutPath | SingleStringPair
** WorkingDirectory
** StandardErrorPath | SingleStringPair
** SoftResourceLimit | SingleDictPair
*** init(dic)
dic: dict
super init set key,
self.dicValue is self.value[0].value
parse dict into self.value

*** add(dic)
parse dict into self.value

*** remove(dic)
remove matching in self.value
** HardResourceLimit | SingleDictPair
*** init(dic)
dic: dict
super init set key,
self.dicValue is self.value[0].value
parse dict into self.value

*** add(dic)
parse dict into self.value

*** remove(dic)
remove matching in self.value
** RunAtLoad
*** init()
    set tag to subclass name, value to empty
    then call setToTrue(), which set value to list contain
    a true BoolSingle
*** setToTrue()
    set self.value to [BoolSingle('true')]
*** setToFalse()
    set value to false
** StartInterval | Pair
*** init()
*** every(num)
    num: int
*** second, minute, hour, week, day
*** example use
#+BEGIN_SRC python
schedule = StartInterval()
schedule.every(10).minute
#+END_SRC
** StartCalendarInterval | Pair
*** init(list)
list: list of dict
*** add(*dic)
dic: dict e.g.:{'Hour':1, 'Minute':10}
*** remove(*dic)
dic: dict e.g.:{'Hour':1, 'Minute':10}
*** gen(month=0, day=0, week=0, weekday=0, hour=0, minute=0)
    this function gives you a dict to pass to self.add
    0 means wildcard
    weekday is the day in a week, Sunday as 1
    e.g.:
#+BEGIN_SRC python
schedule.add(gen(day=1) # every first day of month
schedule.remove(gen(day=1) # remove the schedule
schedule.add(gen(day=1),gen(day=15)) # every first day and the mid month
#+END_SRC
*** genMix(month=(), day=(), week=(), weekday=(), hour=(), minute=())
    arg: tuple of int
    Just like gen(), this function generates stuff to be passed into add().
    It generates a list of functions so you can do basically any calendar schedule you want
    e.g.: every two days from 1st to 21st in March, April, June and August
#+BEGIN_SRC python
schedule = StartCalendarInterval()
schedule.add(genMix(month=(4,6,3,8), day=tuple(range(1, 21, 2))
#+END_SRC
*** genInterval
    Kind of like genMix but only specify (start, end)
    e.g. from March to October from 1st to 10th
#+BEGIN_SRC python
schedule = StartCalendarInterval()
schedule.add(genMix(month=(3,8),day=(1,10)
#+END_SRC
** StartOnMount | BoolPair
** WatchPaths | ArrayOfStringPair
** QueueDirecotries
** KeepAlive
** UserName
** GroupName
** InitGroups
** Umask
** RootDirecotry
** AbandonProcessGroup
** ExitTimeOut
** Timeout
** ThrottleInverval
** LegacyTimers
** Nice

* Note
remove method could be expensive
