* Abustruct classes
** Single
*** init(tag, *value)
    set self.tag to tag, turn value into a list and set to self.value
*** parse()
    just a wrapper for printMe() 
    returns parsed text for luanchd
*** printMe(selfTag, selfValue)
    parse with selfTag and selfValue recusively
    self.tag self.value is normally what to pass in
*** findAll(selfValue)
    returns all not-singles inside selfValue
*** findAllSingles(selfValue)
    returns all singles inside selfValue
*** _add(value, selfValue)
    value: list
    selValue: list
    add value to selfvalue
*** add(*value)
    calls add and add value to self.value
*** _remove(removeList, selfValue)
    remove all matching elements from selfValue
    by matching with every elements in removeList
*** remove(*removeList)
    calls _remove and remove every matching element in self.value
*** clear()
    set self.value to empty
** BoolSingle | Single
   
** TypedSingle | Single
** StringSingle | TypedSingle
** ArraySingle | TypedSingle
** DictSingle | TypedSingle

** Pair | Single
** BoolPair | Pair
** SingleValuePair | Pair
** CoverPair | Pair
** SingleStringPair | SingleValuePair

* launchd classes

** Label | SingleStringPair

*** init(label)
    key is set to subclass name because there is no key argument
    changeTo method is called with label
*** changeTo(value)
    value is string
    change self.value to [StirngSingle]

** Program | SingleStringPair
*** init(label)
    key is set to Program because there is no key argument
    changeTo method is called with label
    
*** changeTo(value)
    value is string
    change self.value to [StirngSingle]

** ProgramArguments | CoverPair
*** init(*l)
    key is set to ProgramArguments because there is no key argument
    take a string or a list of string or a bunch of strings,
    which goes into self.value[0](<ArraySingle>
*** add(argument)
    add argument as StringSingle into ArraySingle

** EnvironmentVariables | SingleStringPair
*** init(path)
    takes a path<str> as path
    
- StandardInPath
- 
- StandardOutPath
- 
- StandardErrorPath
- 
- WorkingDirectory
- 
- SoftResourceLimit
- 
- HardResourceLimit
- 
- RunAtLoad
- 
- StartInterval
- 
- StartCalendarInterval
- 
- StartOnMount
- 
- WatchPath
- 
- QueueDirecotries
- 
- KeepAlive
- 
- UserName
- 
- GroupName
- 
- InitGroups
- 
- Umask
- 
- RootDirecotry
- 
- AbandonProcessGroup
- 
- ExitTimeOut
- 
- Timeout
- 
- ThrottleInverval
- 
- LegacyTimers
- 
- Nice
- 
  
** StandardInPath | SingleStringPair
** StandardOutPath | SingleStringPair
** StandardErrorPath | SingleStringPair
